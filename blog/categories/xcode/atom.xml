<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Xcode | iDevelopSoftware]]></title>
  <link href="http://blog.idevelopsoftware.com/blog/categories/xcode/atom.xml" rel="self"/>
  <link href="http://blog.idevelopsoftware.com/"/>
  <updated>2013-01-30T13:20:12-08:00</updated>
  <id>http://blog.idevelopsoftware.com/</id>
  <author>
    <name><![CDATA[Bennett Smith]]></name>
    <email><![CDATA[bsmith@idevelopsoftware.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Heading to Big Nerd Ranch later this month!]]></title>
    <link href="http://blog.idevelopsoftware.com/2010/10/heading-to-big-nerd-ranch-later-this-month/"/>
    <updated>2010-10-03T00:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2010/10/heading-to-big-nerd-ranch-later-this-month</id>
    <content type="html"><![CDATA[<p>One of the podcasts I listen to on a regular basis is called MacBreak. The hosts are Leo Leporte, Alex Lindsay, Andy Ihnatko and a rotating list of other Mac/Apple/iOS luminaries. If you aren’t familiar with it head over to <a href="http://twit.tv/mbw">http://twit.tv/mbw</a> and have a listen. It is highly recommended for anyone interested in <em>all things Macintosh (and iOS too)</em>.</p>

<p>A few episodes ago Alex Lindsay mentioned that his company was going to be hosting a one week <em>Commuter iOS Class</em> at their San Francisco offices so their team could come up to speed developing applications for iOS devices. The class would be taught by the folks from <a href="http://www.bignerdranch.com/">Big Nerd Ranch</a>. Usually the BNR folks teach classes from their <em>monastery</em> at a secret location just outside Atlanta, Georgia. Having them venture out to San Francisco; wow, what an opportunity. Oh, did I mention that Alex Lindsay also announced that there were a limited number of spots open to <em>the unwashed masses</em> to attend and the class would be held from 2:00 p.m. until 10:00 p.m. each day so folks could continue to do at least part of their day jobs.</p>

<p>All in all this just sounded too good to pass up so I fired off an e-mail to the folks at BNR to let them know I wanted to attend. My fingers were crossed because I know how quickly their classes fill up. Needless to say I wouldn’t be writing this post if I didn’t get in. <img src='http://www.idevelopsoftware.com/wp-includes/images/smilies/icon_smile.gif' alt=':-)' class='wp-smiley' /></p>

<p>So, I’m off to the <a href="http://www.pixelcorps.com/">Pixel Corps</a> offices later this month to soak up some more iOS goodness. Hope to see a few of you there too.</p>

<p>BTW: Here is a link to the <a href="http://www.bignerdranch.com/classes/commuter_ios_class_with_macbreak_2pm-10pm">course description</a> for anyone curious.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Unit Testing in Xcode 3.1]]></title>
    <link href="http://blog.idevelopsoftware.com/2008/07/setting-up-unit-testing-in-xcode-31/"/>
    <updated>2008-07-28T00:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2008/07/setting-up-unit-testing-in-xcode-31</id>
    <content type="html"><![CDATA[<p>Xcode includes OCUnit, so you don’t need to get a copy. But, you might want to take a look at their website (http://sente.epfl.ch/software/ocunit/) for information and tutorials on how OCUnit is intended to be used.</p>

<p>If you are planning on doing Test Driven Development (TDD) you may also want to get the following packages:</p>

<ul>
<li>OCMock – OCMock is an Objective-C implementation of mock objects. (<a href="http://www.mulle-kybernetik.com/software/OCMock/">http://www.mulle-kybernetik.com/software/OCMock/</a>)</li>
<li>Hamcrest – library of matchers for building test expressions (<a href="http://code.google.com/p/hamcrest/">http://code.google.com/p/hamcrest/</a>)</li>
</ul>


<p>Other good articles on Xcode Unit Testing that I came across:</p>

<ul>
<li>Unit Testing with OCUnit – <a href="http://www.macdevcenter.com/pub/a/mac/2004/04/23/ocunit.html?page=1">http://www.macdevcenter.com/pub/a/mac/2004/04/23/ocunit.html?page=1</a></li>
<li>Test Driving Your Code with OCUnit – <a href="http://developer.apple.com/tools/unittest.html">http://developer.apple.com/tools/unittest.html</a></li>
<li>Xcode unit testing articles – <a href="http://chanson.livejournal.com/tag/unit+testing">http://chanson.livejournal.com/tag/unit+testing</a></li>
<li>Unit Testing with Xcode – <a href="http://www.stiefels.net/2007/05/01/unit-testing-with-xcode/">http://www.stiefels.net/2007/05/01/unit-testing-with-xcode/</a></li>
</ul>


<p>By reading through the documents references above I was able to get OCUnit up and running for one of my projects. It took a bit of experimentation, but in the end it looks like OCUnit will work just fine for doing TDD in Xcode with Objective-C. Anyone wanting to try out TDD should give it a try. The benefits for your project are significant. Go for it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Method Swizzling in Safari on Mac OS X]]></title>
    <link href="http://blog.idevelopsoftware.com/2008/05/method-swizzling-in-safari-on-mac-os-x/"/>
    <updated>2008-05-09T00:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2008/05/method-swizzling-in-safari-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>Recently I have been working on an extension for the Safari web browser. The biggest challenge when developing an extension for Safari is determining how to hook your code into Safari.app. Most browsers these days provide hooks to allow development of extensions, but Safari does not.</p>

<p>A technique that many people use to add functionality to Safari (and other Cocoa applications) is called Method Swizzling. If you want to learn more about this technique there is a <a href="http://www.cocoadev.com/index.pl?MethodSwizzling">terrific article</a> explaining all the details on the CocoaDev site.</p>

<p>When applying the method swizzling technique you may find that the linker complains about <em>unresolved classes</em> and won’t link your bundle. This issue usually crops up when you try swizzling a method that is in a class you learned about by running <a href="http://www.codethecode.com/projects/class-dump/">class-dump</a> or by using <a href="http://www.fscript.org">FScript</a>. If you run into this problem bring up the project properties in Xcode and add <code>-undefined dynamic_lookup</code> to the <strong>Other Linker Flags</strong> section.</p>

<p>Without this extra flag your plug-in will not link, and you will be stuck in the mud! Thanks to Aaron Harnly, author of <a href="http://harnly.net/software/letterbox">Letterbox</a>, for pointing this out to me in an e-mail exchange.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating a GDB Log File for Xcode Debug Sessions]]></title>
    <link href="http://blog.idevelopsoftware.com/2008/02/generating-a-gdb-log-file-for-xcode-debug-sessions/"/>
    <updated>2008-02-02T00:00:00-08:00</updated>
    <id>http://blog.idevelopsoftware.com/2008/02/generating-a-gdb-log-file-for-xcode-debug-sessions</id>
    <content type="html"><![CDATA[<p>If you would like to capture a log of everything that GDB displays during a debugging session you can do the following:<br/>
<code>&lt;br /&gt;
$ defaults write com.apple.Xcode PBXGDBDebuggerLogToFile YES&lt;br /&gt;
</code><br/>
The statement above will turn on logging to a file. Now, you need to set the filename for the debugger output file. Use the following statement to accomplish that.<br/>
<code>&lt;br /&gt;
$ defaults write com.apple.Xcode PBXGDBDebuggerLogFileName /tmp/gdboutput.log&lt;br /&gt;
</code><br/>
This will create a file in the /tmp directory called gdboutput.log, containing everything you see in the GDB command window during your debugging session.</p>

<p>Both of these commands need to be typed into a Terminal.app window. You only need to do this once, as your machine will remember the settings.</p>
]]></content>
  </entry>
  
</feed>
