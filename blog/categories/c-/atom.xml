<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | iDevelopSoftware]]></title>
  <link href="http://blog.idevelopsoftware.com/blog/categories/c-/atom.xml" rel="self"/>
  <link href="http://blog.idevelopsoftware.com/"/>
  <updated>2013-01-30T11:41:24-08:00</updated>
  <id>http://blog.idevelopsoftware.com/</id>
  <author>
    <name><![CDATA[Bennett Smith]]></name>
    <email><![CDATA[bsmith@idevelopsoftware.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nokia places Qt under LGPL License &#8211; Sweet!]]></title>
    <link href="http://blog.idevelopsoftware.com/2009/01/nokia-places-qt-under-lgpl-license-sweet/"/>
    <updated>2009-01-14T00:00:00-08:00</updated>
    <id>http://blog.idevelopsoftware.com/2009/01/nokia-places-qt-under-lgpl-license-sweet</id>
    <content type="html"><![CDATA[<p>I have been a big fan of the Trolltech Qt Framework for a number of years. It is a fantastic way to build high quality cross-platform desktop applications in C++. For the past six years it seems like every project I work on has included a rich desktop GUI application of some sort. Each time this need would arise I would start the process of <em>selling</em> the idea of using the Qt Framework for the project. The biggest hurdle was always the per-developer cost for the commercial license of the framework. I would hear things like</p>

<blockquote><p>Just use MFC. It’s free and we don’t really see a need for the application to be cross-platform anyway.</p></blockquote>

<p>or sometimes I would hear</p>

<blockquote><p>Use the GPL version of Qt and just <em>keep it under the radar</em> until we are sure the application will be released to our customers.</p></blockquote>

<p>It was always frustrating to try and make the case that Qt was a better solution than MFC for UI, was more comprehensive for general development than other frameworks, and that it was worth planning for the possiblity of releasing the applications for Linux or Mac as well as Windows. In the end each project did adopt the Qt Framework, but it really was a distraction to try and justify the use.</p>

<p>Thankfully with the purchase of Trolltech by Nokia we are seeing a change in the licensing terms for the Qt Framework. Starting with the 4.5 release it looks like the framework will be placed under the LGPL license making it much easier to adopt as part of commercial development efforts.</p>

<p>Here are a couple links that discuss the development further:</p>

<ul>
<li><a href="http://arstechnica.com/news.ars/post/20090114-nokia-qt-lgpl-switch-huge-win-for-cross-platform-development.html">ARS Technica</a></li>
<li><a href="http://www.pcworld.com/article/157054/nokia_hopes_to_increase_qt_popularity_with_new_license.html">PC World</a></li>
</ul>


<p>and you can read the news directly from Nokia on the <a href="http://www.qtsoftware.com/about/licensing">Qt Licensing Terms</a> page.</p>

<p>This new development on the licensing front and the recent inclusion of WebKit into the Qt Framework make me very optimistic about a long and prosperous future for developers who know the Qt Framework! <strong>Thank you Nokia!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You can&#8217;t keep a good class library down &#8230; MFC gets reprieve from death sentence!]]></title>
    <link href="http://blog.idevelopsoftware.com/2008/07/you-cant-keep-a-good-class-library-down-mfc-gets-reprieve-from-death-sentence/
/"/>
    <updated>2008-07-15T00:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2008/07/you-cant-keep-a-good-class-library-down-mfc-gets-reprieve-from-death-sentence/you-cant-keep-a-good-class-library-down-mfc-gets-reprieve-from-death-sentence</id>
    <content type="html"><![CDATA[<p>A few years ago I was working at a company where we built applications using Visual Studio 6 and MFC. The applications had been around for about 10-12 years, and were all showing their age. Customers were beginning to request updated user interface features like they were seeing in <em>modern</em> Microsoft products such as Office and Internet Explorer. Sadly, we could not deliver these user interface enhancements easily because MFC was not getting any attention from Microsoft.</p>

<p>In late 2002 Microsoft was pushing the .NET Framework, C# and WinForms as the heir apparent for Win32, C++ and MFC. Converting a decade of legacy C++ MFC code to .NET and WinForms just wasn’t an option. We all felt like Microsoft had just abandoned us for greener pastures.</p>

<p>Our solution at the time was to start a long difficult process of moving away from MFC toward a cross-platform class library built by <a href="http://www.trolltech.com">Trolltech</a>, called Qt. In many respects this turned out to be a good decision since it meant we could begin to seriously consider offering our applications on Windows, Linux and the Mac instead of just on Windows. Still, it felt like Microsoft had hung us out to dry.</p>

<p>The WinForms classes just were not rich enough to build complex desktop applications at the time. Many of the conveniences we had come to rely upon from the MFC class libraries were missing and it would have been up to us to roll our own alternatives had we gone down the WinForms route. I think Microsoft was too focused on building web applications to devote sufficient resources to WinForms.</p>

<p>Here we are six years later and Microsoft has announced that they are providing a <em>MFC Feature Pack for Visual C++ 2008</em> that will add significantly to the capabilities of the MFC class libraries. I can hear MFC development teams all across the Internet celebrating this change in stance from Microsoft.</p>

<p>Here are a couple links to information from Microsoft on the topic:</p>

<ul>
<li><a href="http://msdn.microsoft.com/en-us/library/bb982354.aspx">MFC Feature Pack for Visual C++ 2008</a></li>
<li><a href="http://channel9.msdn.com/posts/Charles/Pat-Brenner-New-Updates-to-MFC-in-Visual-Studio-2008/">Pat Brenner: New Updates to MFC in Visual Studio 2008</a></li>
</ul>


<p>Couple MFC with a good third-party widget library like the toolkit offered by <a href="http://www.codejock.com/">CodeJock Software</a> and you have everything necessary to build some awesome new desktop applications.</p>

<p><strong>Long Live MFC!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GetQueuedCompletionStatus() &#8211; Devil in the Details!]]></title>
    <link href="http://blog.idevelopsoftware.com/2008/05/attention-to-details-required-when-using-getqueuedcompletionstatus/"/>
    <updated>2008-05-22T00:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2008/05/attention-to-details-required-when-using-getqueuedcompletionstatus</id>
    <content type="html"><![CDATA[<p>One of the projects I work on makes use of the Win32 asynchronous I/O model for managing network traffic between a Windows Service and a custom-built network device.</p>

<p>One of the key Win32 APIs we use is called GetQueuedCompletionStatus. This API provides access to an I/O completion port that is managed by a separate operating system thread.</p>

<p>When dealing with this API and Windows asynchronous I/O in general it helps to think about the model as being supported by a separate workpool thread. This API gives the caller a way to synchronize with the operations of that workpool thread (or threads).</p>

<p>The prototype for this API is as follows:</p>

<pre>BOOL GetQueuedCompletionStatus(
    HANDLE CompletionPort,
    LPDWORD lpNumberofBytes,
    PULONG_PTR lpCompletionKey,
    LPOVERLAPED* lpOverlapped,
    DWORD dwMilliseconds);
</pre>


<p></p></p>

<p>At first glance the API may not seem too complex. There are 5 parameters and a boolean return type. Some of the parameters are easy to figure out just be looking at their names. Others are less clear. You could speculate that the returned boolean is an indicator of whether or not the operation was successful or not. It is easy to be lulled into a false sense of understanding by reading through the first few paragraphs of the MSDN documentation on this API.</p>

<p>It actually turns out that this API is very complex (perhaps too complex?), and careful study of the MSDN documentation is required if you wish to handle all of the possible conditions when this API returns. Pay careful attention to the section in the documentation that discusses <strong>Return Values</strong> and <strong>Remarks</strong>.</p>

<p>My favorite gem from the return values section (and the one I recently missed when using this API) is:</p>

<blockquote><p>If a socket handle associated with a completion port is closed, GetQueuedCompletionStatus returns ERROR_SUCCESS, with *lpOverlaped non-NULL and lpNumberOfBytes equal to zero.</p></blockquote>

<p>In other words, when the socket is closed (possibly because the peer closed it) you will get what appears to be a successful I/O completion. This does not represent what most would consider a successful return, and if you have not carefully checked the other parameters, your code may mis-interpret this condition.</p>

<p>Another area where you need to be careful when using Windows Asynchronous I/O is application shutdown. There may be a number of pending I/O operations that have been queued to the I/O completion port. It is your responsibility to finish processing all of these I/O operations (possibly by first closing the socket and then handling each failed I/O completion event) <strong>and</strong> release any resources that were allocated for the I/O operations. Failing to do this will likely result in a memory leak for the application.</p>

<p>The moral of the story is to always read the entire MSDN documentation page and make sure your code handles all of the possible combinations of return values!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Separate Interface and Implementation in C/C++]]></title>
    <link href="http://blog.idevelopsoftware.com/2008/04/separate-interface-and-implementation-in-cc/"/>
    <updated>2008-04-02T00:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2008/04/separate-interface-and-implementation-in-cc</id>
    <content type="html"><![CDATA[<p>I spend most of my time developing software in C/C++, and have done so for many years now. One thing that always catches me by surprise is when I find code written by someone who decides to put implementation details of a function or method in a header file. The only reason I can come up with for why developers would do this is pure laziness.</p>

<blockquote><p>Let’s face it, C and C++ are such a pain in the but. I mean, each ADT or Class needs two files; a .h and .c/.cpp. It sure would be easier to just lump all the stuff in a single file. Well, since C/C++ can’t generally handle that we might as well sprinkle some of the code into the .h file and some of it into the .cpp file. The compiler really doesn’t care where the code is. And, to top it off, switching between files in most editors takes at least one keystroke. Whoooaaa – what a burden for a busy developer. <img src='http://www.idevelopsoftware.com/wp-includes/images/smilies/icon_smile.gif' alt=':-)' class='wp-smiley' /></p></blockquote>

<p>Of course, this has been written about by numerous people on the web as well as having been covered by many technical journals and books. The concept is to keep the interface in one file and the implementation in another. I am still amazed to find that people routinely place implemenation details in the header files of C++ classes. All this does is <strong>slow down compile times</strong>. Some might say “So what, it doesn’t really matter anyhow. The program still compiles.” Well I say life is too short to spend all your time waiting for the compiler to recompile code that it already compiled, and for which there is no actualy reason to recompile at this point.</p>

<p>It all comes down to dependency management. Developers need to understand how the pieces of their programs interact, how that interaction impacts the build speed for the application, and be aware of techniques they can use to minimize the dependencies between components in their applications.</p>

<p>So, why is it such a bad idea to put implementation details into a header file? There are a number of design principles that would suggest separating interface from implementation pays dividens over the lifetime of an application.</p>

<p>When implementation details creep into an interface header everyone suffers. The compiler has to recompile many more modules each time an implementation change is made. Usually these recompiles are completely unnecessary since all the other modules require is the interface definition from the header file. The problem is that the compiler cannot distinguish an interface change from an implementation change when all of the code is packed into a single header file.</p>

<p>By keeping interface and implementation seperate compile speed will improve. On all but the most trivial projects this is an important thing to keep in mind.</p>
]]></content>
  </entry>
  
</feed>
