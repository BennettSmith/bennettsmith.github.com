<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Security | iDevelopSoftware]]></title>
  <link href="http://blog.idevelopsoftware.com/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://blog.idevelopsoftware.com/"/>
  <updated>2013-01-30T11:32:56-08:00</updated>
  <id>http://blog.idevelopsoftware.com/</id>
  <author>
    <name><![CDATA[Bennett Smith]]></name>
    <email><![CDATA[bsmith@idevelopsoftware.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MacBook Pro Development Environment]]></title>
    <link href="http://blog.idevelopsoftware.com/2010/10/macbook-pro-development-environment/"/>
    <updated>2010-10-01T00:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2010/10/macbook-pro-development-environment</id>
    <content type="html"><![CDATA[<p>This article covers the steps I went through to setup my MacBook Pro for Google App Engine (GAE) development. I am using the Python runtime in GAE so the focus here is on a Python development environment.</p>

<h1>Python</h1>

<h2>Setting Python 2.5 as Default</h2>

<p>My MacBook Pro is running Snow Leopard. I am planning to host my projects on Google App Engine and it requires Python 2.5. Snow Leopard ships with Python 2.6 as the default. You can switch to Python 2.5 using a few simple commands, as follows:</p>

<pre>$ defaults write com.apple.versioner.python Version 2.5
$ sudo defaults write /Library/Preferences/com.apple.versioner.python Version 2.5
</pre>


<p>After issuing these commands you should logout and login, launch a Terminal window and issue the command</p>

<pre>$ python --version
</pre>


<p>It should report <tt>Python 2.5.4</tt> as the result. If it still says <tt>Python 2.6.1</tt> then your change did not take effect. To troubleshoot the problem start with <tt>man python</tt>. It includes information on how to switch the default version of Python on your system.</p>

<h2>Additional Python Modules</h2>

<p>Google App Engine expects that the ssl module is installed. This is so it can verify the identity of the GAE servers when trying to deploy your projects. Install it like this:</p>

<pre>$ curl http://pypi.python.org/packages/source/s/ssl/ssl-1.15.tar.gz --output ssl-1.15.tar.gz
$ tar xvf ssl-1.15.tar.gz
$ cd ssl-1.15
$ sudo python setup.py install
</pre>


<p>If you want to use the GAE image manipulation classes while running on the local development server you will need to install PIL using the following command.</p>

<pre>$ sudo easy_install pil
</pre>


<p>The following will be necessary for building some other python libraries later in the process.</p>

<pre>$ sudo easy_install docutils
</pre>


<p>The following modules are necessary if you choose to install IPython (see next section). If you are planning on skipping the IPython installation these can be skipped as well.</p>

<pre>$ sudo easy_install readline
$ sudo easy_install nose
$ sudo easy_install pexpect
</pre>


<h2>IPython</h2>

<p>The IPython interactive interpreter is a good addition to your Python development environment. It does not come pre-installed on Snow Leopard. You can download the latest stable version using this command:</p>

<pre>$ curl http://ipython.scipy.org/dist/0.10/ipython-0.10.tar.gz --output ipython-0.10.tar.gz
$ tar -xzf ipython-0.10.tar.gz
$ cd ipython
$ sudo python setup.py install
</pre>


<h1>Google App Engine SDK</h1>

<p>The Google App Engine SDK for Python is available at http://code.google.com/appengine/downloads.html. As of this writing you can use the following command to grab the latest version:</p>

<pre>$ curl http://googleappengine.googlecode.com/files/GoogleAppEngineLauncher-1.3.7.dmg --output GoogleAppEngineLauncher-1.3.7.dmg
</pre>


<p>Once you download the <tt>dmg</tt> file open it in Finder and run the installer. It will place all of the necessary files on your machine. Once complete locate the <em>GoogleAppEngineLauncher.app</em> icon in Finder and double-click on it. This application provides a nice UI for managing your GAE projects.</p>

<h1>Source Code Management Tools</h1>

<h2>Git</h2>

<p>I am planning on managing the source code for my projects with <tt>git</tt> and will store my master repositories on <a href="http://github.com">http://github.com</a>. Apple does not include a copy of <tt>git</tt> on the machine by default. An installer is available at <a href="http://help.github.com/mac-git-installation/">http://help.github.com/mac-git-installation/</a>. While you are at it also create an account on github if you donâ€™t already have one. It is useful for <em>social coding</em> in the wider open-source community.</p>

<h2>Mercurial</h2>

<p>Some of the Django open source software I plan on using is maintained using a distributed source control management tool called Mercurial. An installer for this is available at <a href="http://mercurial.selenic.com">http://mercurial.selenic.com</a>. Download and install the software.</p>

<pre>$ curl http://mercurial.selenic.com/release/mercurial-1.6.3.tar.gz --output mercurial-1.6.3.tar.gz
$ tar xvf mercurial-1.6.3.tar.gz
$ cd mercurial-1.6.3
$ make PREFIX=/System/Library/Frameworks/Python.framework/Versions/2.5 all
$ sudo make PREFIX=/System/Library/Frameworks/Python.framework/Versions/2.5 install
$ hg version
</pre>


<h1>Django-nonrel</h1>

<p>I plan on implementing my web applications on top of the Django framework. Some modifications are required in order for this framework to run properly on GAE since Google uses <em>Big Table</em> for data storage instead of a relational database. Everything necessary to get Django working in GAE is included as part of the <a href="http://www.allbuttonspressed.com/projects/django-nonrel">Django-nonrel</a> project. Specific instructions for GAE are available at <a href="http://www.allbuttonspressed.com/projects/djangoappengine">http://www.allbuttonspressed.com/projects/djangoappengine</a>.</p>

<p>Use the commands listed below to install copies of all the necessary components onto your machine. Everything will be stored in a folder called <tt>DjangoStuff</tt> under your home directory.</p>

<pre>$ mkdir $HOME/DjangoStuff
$ cd $HOME/DjangoStuff
$ hg clone https://bitbucket.org/wkornewald/django-nonrel
$ hg clone https://bitbucket.org/wkornewald/djangoappengine
$ hg clone https://bitbucket.org/wkornewald/djangotoolbox
$ hg clone https://bitbucket.org/wkornewald/django-dbindexer
$ hg clone https://bitbucket.org/wkornewald/django-testapp
</pre>


<p>Now, pick another folder where you want to setup a practice application. I am calling mine <tt>cs-practice</tt> since this is also the name of my Google App Engine application.</p>

<p>Use the following commands to configure the practice application for Django-nonrel development.</p>

<pre>$ mkdir $HOME/cs-practice
$ cd $HOME/cs-practice
$ ln -s $HOME/DjangoStuff/django-nonrel/django django
$ ln -s $HOME/DjangoStuff/djangoappengine djangoappengine
$ ln -s $HOME/DjangoStuff/djangotoolbox/djangotoolbox djangotoolbox
$ ln -s $HOME/DjangoStuff/django-dbindexer/dbindexer dbindexer
$ cp -r $HOME/DjangoStuff/django-testapp/* .
</pre>


<p>Once you have the practice folder setup you need to edit the <tt>app.yaml</tt> file and change the application name to reflect the Google App Engine application name you selected when registering on <a href="http://appengine.google.com">http://appengine.google.com</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protect Sensitive Data on your MacBook Pro]]></title>
    <link href="http://blog.idevelopsoftware.com/2008/03/protect-sensitive-data-on-your-macbook-pro/"/>
    <updated>2008-03-13T00:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2008/03/protect-sensitive-data-on-your-macbook-pro</id>
    <content type="html"><![CDATA[<p>One thing I am always nervous about is storing sensitive data on my MacBook Pro. Over the past few years it seems like there are stories popping up in the news about some organization loosing sensitive customer data when a laptop is misplaced. As someone who makes a conscious effort to have only one computer, I am concerned about storing my banking and tax information on a portable computer. <span class="alignleft"><br /> <a target="_blank" href="http://www.amazon.com/gp/product/B000VKQ8VE?ie=UTF8&tag=idevelop-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B000VKQ8VE"><img border="0" src="http://idvlpsw.files.wordpress.com/2008/03/41my62mkrll-sl160.jpg" /></a><img src="http://www.assoc-amazon.com/e/ir?t=idevelop-20&l=as2&o=1&a=B000VKQ8VE" width="1" height="1" border="0" alt="" style="border:none !important;margin:0 !important;" /><br /> </span></p>

<p>After searching for quite some time I finally settled on a solution that has been working very well for me. My criteria were as follows:</p>

<ul>
<li>Data must be encrypted.</li>
<li>Storage device must be removable.</li>
<li>Data access should only be permitted once a suitable password has been entered.</li>
<li>Password must be required to access data after MacBook Pro comes out of sleep mode.</ol>
To meet my goals I am using a piece of software called <a href="http://www.knoxformac.com">Knox</a> in conjunction with an ExpressCard/34 solid-state disk. I am currently using a Lexar ExpressCard/34 SSD with an 8GB capacity since that is what the local computer store had available at the time, about six months ago. Today it is possible to get a 32GB card from TRANSCEND, so the capacity is ever increasing! <span class="alignright"><a target="_blank" href="http://www.knoxformac.com/"><img class="alignright" src="http://idvlpsw.files.wordpress.com/2008/03/logotag.gif" alt="logotag.gif" border="0" width="300" height="57" /></a></span></li>
</ul>


<p>The card I store my sensitive data on is the Lexar 8GB ExpressCard SSD. It fits in the ExpressCard/34 slot on the left side of my MacBook Pro and is makes for a very convenient place to store all of my Quicken and TurboTax data files. Using Knox I setup the entire Lexar card as an encrypted filesystem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Computer Repair vs Auto Repair &#8212; Why they are very different.]]></title>
    <link href="http://blog.idevelopsoftware.com/2008/03/computer-repair-vs-auto-repair-why-they-are-very-different/"/>
    <updated>2008-03-13T00:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2008/03/computer-repair-vs-auto-repair-why-they-are-very-different</id>
    <content type="html"><![CDATA[<p>Computer repair agreements may not always guarantee that you get the old parts back. They also may not guarantee that the replacement parts are new.</p>

<p>When I go to the auto repair shop the paperwork you are asked to sign before the work is started always has a box on it that you can check if you would like to have all of the replaced parts returned to you. And, you always get new parts put on your car unless you make specific arrangements to okay the use of a remanufactured part.</p>

<p>For a car there really isnâ€™t a security risk associated with not getting the original parts back or using remanufactured parts in a repair. With a computer the story is very different. It is commonplace for people to store sensitive information on their personal computer systems. If the hard-drive fails and the computer needs to be taken into the shop for repairs it should not be acceptable for the company doing the repairs to keep your original hard-drive. After all, it contains all sorts of sensitive information that you did not have an opportunity to erase prior to the repair.</p>

<p>Right about now you might be thinking<br/>
Hey, it doesnâ€™t matter to me. The drive is dead. No one can read it, right?<br/>
Well, you would be wrong. Companies that repair these drives do exist, and remanufactured drives are used for repairs of other customer computers.</p>

<p>Just imagine your surprise when the computer you just got repaired now has your neighborâ€™s hard-drive in it, and the shop didnâ€™t even bother to erase their information before installing it in your machine. Now you have all of their data! Ouch!</p>

<p>Also, the repaired drive in your computer may actually be older than the drive you originally had. It may not be new at all. Given that these drives do have a manufacture rated MTBF (mean-time between failures) that seems to be very accurate, you may be in for another repair within a few weeks or months.</p>

<p>All in all, this practice seems unacceptable on many levels. My suggestion is that whenever your hard-drive fails you should destroy it yourself and should replace it with another one from a reputable supplier. And, you should always make sure the drive is new, not remanufactured!</p>
]]></content>
  </entry>
  
</feed>
