<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software | iDevelopSoftware]]></title>
  <link href="http://blog.idevelopsoftware.com/blog/categories/software/atom.xml" rel="self"/>
  <link href="http://blog.idevelopsoftware.com/"/>
  <updated>2013-01-31T06:33:25-08:00</updated>
  <id>http://blog.idevelopsoftware.com/</id>
  <author>
    <name><![CDATA[Bennett Smith]]></name>
    <email><![CDATA[bsmith@idevelopsoftware.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How I setup Ubuntu 11.04 Server using VirtualBox on a MacBook Air]]></title>
    <link href="http://blog.idevelopsoftware.com/2011/07/how-i-setup-ubuntu-11-04-server-using-virtualbox-on-a-macbook-air/"/>
    <updated>2011-07-22T08:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2011/07/how-i-setup-ubuntu-11-04-server-using-virtualbox-on-a-macbook-air</id>
    <content type="html"><![CDATA[<p>Download and install the latest version of VirtualBox from http://www.virtualbox.org. As I write this article the current version is 4.1.</p>

<p>Download the Ubuntu 11.04 Server .ISO file from http://www.ubuntu.com. I first tried the 64-bit version but it seems that VirtualBox has trouble with it. The 32-bit version worked just fine, and for the sort of development tasks I am planning it will be okay so I didn’t look any further into why the 64-bit version failed to install.</p>

<p>Create a new virtual machine. I called mine “ubuntu-11.04″. This one will be used as a basis for other machines I clone.  I went with 512MB of RAM and 40GB of hard drive space, making sure that the hard drive was configured to grow dynamically.  I accepted all of the default settings during the installation process. I did not install any additional packages at this stage.  Since I plan on using Vagrant (http://vagrantup.com) to manage my virtual machines I chose to name this machine ubuntu and gave it a user name of “Vagrant Manager” with a login of “vagrant” and a password of “vagrant”.</p>

<p>Shutdown the virtual machine and then create a snapshot (I called mine “Fresh Install”).</p>

<p>You are now ready to create a clone of this machine and start playing around.  Right-click on the virtual machine you just created and select “Clone…” from the context menu.  Give your new virtual machine a unique name and be sure to check the “Reinitialize the MAC address of all network cards” option. I assigned the name “vagrant-ubuntu-natty” since that is in keeping with the conventions mentioned on the Vagrant site. I choose to only clone the current machine state.</p>

<p>Boot up the new virtual machine once the clone operation completes.  Log in using vagrant/vagrant.  You will now need to correct issues with the ethernet drivers.  Basically, when you asked VirtualBox to reinitialize the MAC addresses it caused the operating system to no longer recognize the virtual ethernet adapter hardware.  The steps to correct this are:</p>

<pre>sudo rm /etc/udev/rules.d/70-persistent-net.rules</pre>




<pre>sudo service udev restart</pre>




<pre>sudo shutdown -r now</pre>


<p>By running these three commands your virtual machine will be reconfigured to now recognize the new virtual ethernet adapters with their reinitialized MAC addresses.</p>

<p>Now you can proceed to install the VirtualBox Guest Additions software.  Start by updating the Ubuntu software using these commands:</p>

<pre>sudo apt-get update</pre>




<pre>sudo apt-get -y upgrade</pre>




<pre>sudo apt-get -y install linux-headers-$(uname -r)</pre>




<pre>sudo apt-get -y install dkms</pre>




<pre>sudo shutdown -r now</pre>


<p>At this point you are actually ready to do the installation of the Guest Additions. From the Devices menu in VirtualBox select the “Install Guest Additions…” menu item. This will “insert” the CD containing the guest additions software into the virtual machine.Now, from your virtual machine run the following commands.</p>

<pre>sudo mkdir /tmp/cdrom</pre>




<pre>sudo mount /dev/cdrom /tmp/cdrom</pre>




<pre>cd /tmp/cdrom</pre>




<pre>sudo ./VBoxLinuxAdditions.run</pre>


<p>Note, the installation of the Window System drivers will fail. This is okay; remember, we are running the server variant of Ubuntu and don’t have any of the windowing system components installed.</p>

<p>Now change the hostname for the system so it can be used as a Vagrant base box.</p>

<pre>sudo hostname vagrant-ubuntu-natty.vagrantup.com</pre>


<p>Edit the /etc/hosts file and change the second line where localhost is defined. Set the fully qualified domain name for the host and the short name for the host.</p>

<p>Edit the /etc/hostname file and replace “ubuntu” with “vagrant-ubuntu-natty”.</p>

<p>Edit the /etc/resolv.conf file and replace the domain and search values with “vagrantup.com”.</p>

<p>Reboot the machine once more using</p>

<pre>sudo shutdown -r now</pre>


<p>It is now time to setup the rest of the required software on the guest in order for it to be used as a Vagrant base box.</p>

<p>Start by editing /etc/sudoers using</p>

<pre>sudo vim /etc/sudoers</pre>


<p>Add or change the line giving sudo access to administrators to read as follows:</p>

<pre>%admin ALL=NOPASSWD: ALL</pre>


<p>Add the following line right after the “Defaults env_reset” line:</p>

<pre>Defaults env_keep="SSH_AUTH_SOCK"</pre>


<p>Run the command:</p>

<pre>sudo /etc/init.d/sudo restart</pre>


<p>Now setup the software Vagrant relies upon to provide all it’s goodness.</p>

<pre>sudo apt-get install -y ruby-dev</pre>




<pre>sudo apt-get install -y rubygems</pre>




<pre>sudo apt-get install -y puppet</pre>




<pre>sudo apt-get install -y chef</pre>




<pre>sudo gem install chef</pre>




<pre>sudo apt-get install -y openssh-server openssh-client</pre>


<p>When installing the chef package (above) you will be prompted for the URL of the Chef server. Just press enter here and ignore that step. We are only interested in chef-solo, and this URL is only used by chef-client. The package installer will go ahead and configure the chef client to run automatically. We now need to disable this by running the following command:</p>

<pre>sudo /usr/sbin/update-rc.d chef-client disable</pre>


<p>Edit the file /etc/ssh/sshd_config and add the following line (case matters here):</p>

<pre>UseDNS no</pre>


<p>Configure a secure key pair for our new Vagrant base box by running the following command on the host system.</p>

<pre>ssh-keygen -P "" -t rsa -C "Some meaningful comment" -f ./vagrant-id_rsa</pre>


<p>This command will create two files in the local directory called vagrant-id_rsa and vagrant-id_rsa.pub.  You will need to copy vagrant-id_rsa.pub into the ~/.ssh/authorized_keys file on the guest system. To do this you will need to setup port forwarding between the host and guest. The first step is to learn what the IP address of the host and guest systems are.  Use the following command to view the network adapters that are configured on each system:</p>

<pre>ifconfig</pre>


<p>Run this on both the host and guest. Once you know both IP addresses you need to add a port forwarding rule in Virtual Box for the SSH port. This is done by selecting the “Settings…” menu item from the “Machine” menu.  Once you have the settings dialog box open select the “Network” button and then open the “Advanced” section.  You will see a button labeled “Port Forwarding”. Press it to open the port forwarding rule editor. Here you need to create a rule as follows:</p>

<pre>Name: SSH</pre>




<pre>Protocol: TCP</pre>




<pre>Host IP: &lt;fill in host IP address from ifconfig&gt;</pre>




<pre>Host Port: 9999</pre>




<pre>Guest IP: &lt;fill in guest IP address from ifconfig&gt;</pre>




<pre>Guest Port: 22</pre>


<p>Close the panel and dismiss the settings dialog box. You should now have a port open between the host and the guest for SSH/SCP.  To verify this, enter the following command in a terminal window on the host system.</p>

<pre>ssh -p 9999 vagrant@&lt;host ip address&gt;</pre>


<p>When prompted for a password enter “vagrant”. You should now be in an ssh session on the guest system. If this worked you are ready to propogate the public key generated earlier. You can exit out of the SSH session now by typing exit in the guest. Back on the host type the following command to copy the public key.</p>

<pre>cat vagrant-id_rsa.pub | ssh -p 9999 vagrant@&lt;host ip address&gt; 'sh -c "cat - &gt;&gt;~/.ssh/authorized_keys"'</pre>


<p>You will be prompted for the guest password. Type “vagrant” again. You will now want to test that the key propogated successfully. On the host system enter the following commands.</p>

<pre>ssh-add ./vagrant-id_rsa</pre>




<pre>ssh -p 9999 vagrant@&lt;host ip address&gt;</pre>


<p>If everything worked in the earlier steps you should be in an SSH session on the guest without the need to enter your password!</p>

<p>As a final step before packaging a vagrant base box you should clean things up in the guest by running the following commands:</p>

<pre>sudo apt-get clean</pre>




<pre>sudo apt-get autoclean</pre>


<p>You are now ready to package the vagrant base box. Back on the host system in a terminal window first create a Vagrantfile that points to the SSH private key. Here is an example of what it might look like if you decide to copy your key (generated earlier). Call this file Vagrantfile.pkg.</p>

<pre>Vagrant::Config.run do |config|</pre>




<pre>  config.ssh.private_key_path = "lcl-vagrant-id_rsa"</pre>




<pre>end</pre>


<p>Now invoke this command in the terminal window to create the package.</p>

<pre>vagrant package --base vagrant-ubuntu-natty --include lcl-vagrant-id_rsa --vagrantfile Vagrantfile.pkg</pre>


<p>The packaging takes a little while. Once it completes you should test the base box using these steps:</p>

<pre>mv package.box vagrant-ubuntu-natty.box</pre>




<pre>vagrant box add lclbase32 vagrant-ubuntu-natty.box</pre>




<pre>mkdir test_environment</pre>




<pre>cd test_environment</pre>




<pre>vagrant init lclbase32</pre>




<pre>vagrant up</pre>




<pre>vagrant ssh</pre>


<p>If all went well you are now finished with building a Vagrant base box. Congratulations!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up my Snow Leopard Ruby 1.9.2, Ruby on Rails 3.0, Nginx, Passenger development environment
]]></title>
    <link href="http://blog.idevelopsoftware.com/2010/11/setting-up-my-snow-leopard-ruby-1-9-2-ruby-on-rails-3-0-nginx-passenger-development-environment/"/>
    <updated>2010-11-14T08:00:00-08:00</updated>
    <id>http://blog.idevelopsoftware.com/2010/11/setting-up-my-snow-leopard-ruby-1-9-2-ruby-on-rails-3-0-nginx-passenger-development-environment</id>
    <content type="html"><![CDATA[<p>Snow Leopard ships with Ruby 1.8.7 installed and an older version of Ruby Gems. I am planning on doing some projects with Ruby on Rails and wanted to setup a current environment. My requirements were:</p>

<ul>
<li>Ruby 1.9.2</li>
<li>Rails 3.0</li>
<li>PostgreSQL 9.0</li>
<li>Nginx</li>
<li>Passenger</li>
</ul>


<p>You should download and install the Mac version of PostgreSQL 9.0 from the folks at <a href="http://www.enterprisedb.com/products/download.do">EnterpriseDB</a>. You will need to register on the site in order to do the download. Be sure to download PostgreSQL 9.0.1, not one of their <em>Plus</em> packages. It is a nicely packaged installer for the freely available version of Postgres.</p>

<p>Once you install this software you should have a file called <tt>pg_env.sh</tt> in the <tt>/Library/PostgreSQL/9.0/</tt> directory. This file should be added to your <tt>/etc/profile</tt>. Here is an example of what mine looks like:</p>

<pre># System-wide .profile for sh(1)

# This has to be set to something in order for path_helper (below)
# to update it with paths found in the /etc/manpaths.d directory.
MANPATH=/usr/local/share/man; export MANPATH

# Setup the PostgreSQL environment.
. /Library/PostgreSQL/9.0/pg_env.sh

if [ -x /usr/libexec/path_helper ]; then
    eval `/usr/libexec/path_helper -s`
fi

if [ "${BASH-no}" != "no" ]; then
    [ -r /etc/bashrc ] &#038;&#038; . /etc/bashrc
fi
</pre>


<p>Be sure to log out and log back in before continuing with these instructions. This is important to make sure your PostgreSQL environment variables are set properly.</p>

<p>One of my goals with this setup is to keep everything independent of the default tools that ship with Snow Leopard. To do this I decided that all of my Ruby on Rails setup will be located in the <tt>/usr/local/ror</tt> directory tree. Here is a script I developed to setup my Ruby on Rails development environment.</p>

<pre>#!/bin/bash

# Get and extract a copy of LibYAML
curl http://pyyaml.org/download/libyaml/yaml-0.1.3.tar.gz > yaml-0.1.3.tar.gz
tar xvf yaml-0.1.3.tar.gz

# Build LibYAML
(
    cd yaml-0.1.3
    ./configure
    make
    sudo make install
)

# Get and extract a copy of Ruby 1.9.2
curl ftp://ftp.ruby-lang.org:21//pub/ruby/1.9/ruby-1.9.2-p0.tar.gz > ruby-1.9.2-p0.tar.gz
tar xvf ruby-1.9.2-p0.tar.gz

# Build Ruby 1.9.2
(
    cd ruby-1.9.2-p0
    ./configure --prefix=/usr/local/ror --with-arch=x86_64 --enable-shared
    make
    make test
    sudo make install
)

# Update Ruby Gems
sudo gem update --system

# Install Gems
sudo gem install rails
sudo gem install sqlite3-ruby
sudo gem install pg
sudo gem install passenger

# Configure Passenger for Nginx (downloads Nginx and PCRE automatically)
sudo passenger-install-nginx-module --prefix=/usr/local/ror --auto-download --auto
</pre>


<p><a href="http://wp-media.s3.amazonaws.com/wp-content/uploads/2010/11/doit.sh.tar" class="s3-link">Download the script</a>, un-tar it and place it in any directory you want. I call the script <tt>doit.sh</tt>, but you can name it anything you like. Run the script using the command shown below.</p>

<pre>$ sh ./doit.sh
</pre>


<p>Once the script completes you need to add <tt>/usr/local/ror/bin</tt> to your path. I did this by editing my <tt>/etc/paths</tt> file. Here is a copy of the file on my machine:</p>

<pre>usr/local/ror/bin
/usr/local/bin
/usr/bin
/bin
/usr/sbin
/sbin
</pre>


<p>One more logout/login and you are done. Have fun playing with Ruby on Rails on your Mac!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Attending iOSDevCamp 2010 &#8211; Building Meet4Drinks]]></title>
    <link href="http://blog.idevelopsoftware.com/2010/08/attending-iosdevcamp-2010-building-meet4drinks/"/>
    <updated>2010-08-19T08:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2010/08/attending-iosdevcamp-2010-building-meet4drinks</id>
    <content type="html"><![CDATA[<p><a href="http://www.iosdevcamp.org"><img src="http://www.idevelopsoftware.com/wp-content/uploads/2010/08/iosdevcamp2010.png" alt="iosdevcamp2010.png" title="iosdevcamp2010.png" border="0" width="250" height="37"  style="padding: 5px; padding-right: 20px; float:left;" /></a><br/>
I am attending the yearly iOSDevCamp event this weekend in SanJose, CA. This is a great event where iPhone/iPad software developers and UI/UX designers come together for a weekend of coding and exploration of ideas around how to use iOS devices. The event organizers hold something called a Hackathon where attendees form ad-hoc teams around shared application ideas and spend two full days designing and coding like crazy to build something cool. Everyone has a great time and meets like-minded folks in the developer community.</p>

<p>Earlier this year, in April the event organizers held a special iPadDevCamp. That was my first exposure to this great event format. You can read more about that experience over on the <a href="http://blog.poweredbyamp.com/marketplace-platform/seller-dashboard-ipad/">Powered By AMP</a> blog. For that event I was on a team with some co-workers from <a href="www.auctiva.com">Auctiva</a>. We built a prototype of an e-commerce sales management tool for AMP sellers.</p>

<p>This time I’m attending solo, without a cadre of other Auctiva designers and developers. I want to explore developing location-aware applications for the iPhone and put together a basic idea for an app. It is called Meet4Drinks, and you can read more about it at <a href="http://www.meet4drinks.net">http://www.meet4drinks.net</a>.</p>

<p>If it sounds like something you would enjoy, it’s not too late to register today. The event starts tomorrow (Friday) evening and goes through Sunday evening. Visit <a href="http://www.iosdevcamp.org">http://www.iosdevcamp.org</a> to register.</p>

<p>Look for updates on Meet4Drinks next week, once my head is back above water after the event. Hope to see you there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Developers are Human Beings]]></title>
    <link href="http://blog.idevelopsoftware.com/2009/12/software-developers-are-human-beings/"/>
    <updated>2009-12-07T08:00:00-08:00</updated>
    <id>http://blog.idevelopsoftware.com/2009/12/software-developers-are-human-beings</id>
    <content type="html"><![CDATA[<p>Over on the “Shaping Software” site they just posted a short article titled <a href="http://shapingsoftware.com/2009/12/07/lessons-in-software-from-eric-brechner/">“Lessons in Software from Eric Brechner.”</a> Eric is the Director of Development Excellence on the Engineering Excellence team at Microsoft. The article focuses on his insights about what attributes shape developers into software engineers. He suggests that strength and balance attributes are important. Briefly, they are enumerated as follows:</p>

<h2>Strength attributes</h2>

<ul>
<li>Insightful</li>
<li>Reflective</li>
<li>Principled</li>
</ul>


<h2>Balance attributes</h2>

<ul>
<li>Serving and advocating</li>
<li>Eecution and slack</li>
<li>Trust and risk</li>
</ul>


<p>I really enjoy reading articles like this where the author focuses on the human side of software engineering. As Eric says, <em>You can’t accomplish anything truly impactful alone</em>.</p>

<p>I think it is worth the time to read through this article! Highly recommended.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better than Google: Real answers for Programmers, System Administrators and IT Professionals]]></title>
    <link href="http://blog.idevelopsoftware.com/2009/06/better-than-google-real-answers-for-programmers-system-administrators-and-it-professionals/"/>
    <updated>2009-06-07T08:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2009/06/better-than-google-real-answers-for-programmers-system-administrators-and-it-professionals</id>
    <content type="html"><![CDATA[<p>Technology is more complex now than ever. It seems like the diversity of topics a programmer, system administrator or IT professional must have some familiarity with grows exponentially. In the office it is all to common to hear someone say “Did you google it?” or “I found a post that looks like it might be related on google.” when trying to sort out complex technology issues.</p>

<p>Google is good, but real people working together, sharing their experience with each other and documenting the results for others to take advantage of works even better. Two sites that should be in every technologists bookmark list are <a href="http://www.stackoverflow.com">stackoverflow</a> and <a href="http://www.serverfault.com">serverfault</a>.</p>

<p>You can think of these sites as <em>social networking communities</em> with very focused areas of interest. Anyone can post a question to a site, anyone can provide an answer, and everyone votes on the best answers. Comments can be added to questions or answers, folks develop “street cred” by providing useful answers and eventually become recognized by their peers as knowledgeable on specific topics.</p>

<div style="text-align-left;">
  <a href="http://www.stackoverflow.com"><br /> <img src="http://wp-media.s3.amazonaws.com/logos/stackoverflow_logo.png" alt="stackoverflow logo" border="0" /><br /> </a>
</div>


<p>Stack Overflow is a collaboratively edited question and answer site for<br/>
programmers – regardless of platform or language. It’s 100% free, no<br/>
registration required.</p>

<div style="text-align-left;">
  <a href="http://www.serverfault.com"><br /> <img src="http://wp-media.s3.amazonaws.com/logos/serverfault_logo.png" alt="serverfault logo" border="0" /><br /> </a>
</div>


<p>Server Fault is a collaboratively edited question and answer site for system<br/>
administrators and IT professionals – regardless of platform. It’s 100% free,<br/>
no registration required.</p>
]]></content>
  </entry>
  
</feed>
