<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: How To | iDevelopSoftware]]></title>
  <link href="http://blog.idevelopsoftware.com/blog/categories/how-to/atom.xml" rel="self"/>
  <link href="http://blog.idevelopsoftware.com/"/>
  <updated>2013-01-30T20:32:59-08:00</updated>
  <id>http://blog.idevelopsoftware.com/</id>
  <author>
    <name><![CDATA[Bennett Smith]]></name>
    <email><![CDATA[bsmith@idevelopsoftware.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Capturing AirPort Extreme Log with Lion Server Syslog]]></title>
    <link href="http://blog.idevelopsoftware.com/2011/08/capturing-airport-extreme-log-with-lion-server-syslog/"/>
    <updated>2011-08-09T08:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2011/08/capturing-airport-extreme-log-with-lion-server-syslog</id>
    <content type="html"><![CDATA[<p>Mac OS X Lion Server can be used as a syslog server to capture the log messages from an Apple AirPort Extreme wireless router. The instructions below walk you through setting this up.</p>

<p>Syslog is controlled by a plist file found in the launch daemons directory. The full path to the file is:</p>

<pre>/System/Library/LaunchDaemons/com.apple.syslogd.plist
</pre>


<p>You need to edit this file to add a network listener. The plist is stored in a binary format so you need to use the plutil to convert it to XML using this command:</p>

<pre>$ pushd /System/Library/LaunchDaemons
$ sudo plutil -convert xml1 /System/Library/LaunchDaemons/com.apple.syslogd.plist
$ sudo vim /System/Library/LaunchDaemons/com.apple.syslogd.plist
$ sudo plutil -convert binary1 /System/Library/LaunchDaemons/com.apple.syslogd.plist
$ sudo launchctl unload /System/Library/LaunchDaemons/com.apple.syslogd.plist
$ sudo launchctl load /System/Library/LaunchDaemons/com.apple.syslogd.plist
</pre>


<p>Here is a complete example of the modified plist file. The new key is the NetworkListener. Be sure you add it nested inside the Sockets key or it will not work.</p>

<p><div><script src='https://gist.github.com/1134216.js'></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
	&lt;key&gt;EnableTransactions&lt;/key&gt;
	&lt;true/&gt;
	&lt;key&gt;EnvironmentVariables&lt;/key&gt;
	&lt;dict&gt;
		&lt;key&gt;ASL_DISABLE&lt;/key&gt;
		&lt;string&gt;1&lt;/string&gt;
	&lt;/dict&gt;
	&lt;key&gt;HopefullyExitsLast&lt;/key&gt;
	&lt;true/&gt;
	&lt;key&gt;JetsamProperties&lt;/key&gt;
	&lt;dict&gt;
		&lt;key&gt;JetsamMemoryLimit&lt;/key&gt;
		&lt;integer&gt;300&lt;/integer&gt;
		&lt;key&gt;JetsamPriority&lt;/key&gt;
		&lt;integer&gt;-49&lt;/integer&gt;
	&lt;/dict&gt;
	&lt;key&gt;Label&lt;/key&gt;
	&lt;string&gt;com.apple.syslogd&lt;/string&gt;
	&lt;key&gt;MachServices&lt;/key&gt;
	&lt;dict&gt;
		&lt;key&gt;com.apple.system.logger&lt;/key&gt;
		&lt;true/&gt;
	&lt;/dict&gt;
	&lt;key&gt;OnDemand&lt;/key&gt;
	&lt;false/&gt;
	&lt;key&gt;ProgramArguments&lt;/key&gt;
	&lt;array&gt;
		&lt;string&gt;/usr/sbin/syslogd&lt;/string&gt;
	&lt;/array&gt;
	&lt;key&gt;Sockets&lt;/key&gt;
	&lt;dict&gt;
		&lt;key&gt;NetworkListener&lt;/key&gt;
		&lt;dict&gt;
			&lt;key&gt;SockServiceName&lt;/key&gt;
			&lt;string&gt;syslog&lt;/string&gt;
			&lt;key&gt;SockType&lt;/key&gt;
			&lt;string&gt;dgram&lt;/string&gt;
		&lt;/dict&gt;
		&lt;key&gt;AppleSystemLogger&lt;/key&gt;
		&lt;dict&gt;
			&lt;key&gt;SockPathMode&lt;/key&gt;
			&lt;integer&gt;438&lt;/integer&gt;
			&lt;key&gt;SockPathName&lt;/key&gt;
			&lt;string&gt;/var/run/asl_input&lt;/string&gt;
		&lt;/dict&gt;
		&lt;key&gt;BSDSystemLogger&lt;/key&gt;
		&lt;dict&gt;
			&lt;key&gt;SockPathMode&lt;/key&gt;
			&lt;integer&gt;438&lt;/integer&gt;
			&lt;key&gt;SockPathName&lt;/key&gt;
			&lt;string&gt;/var/run/syslog&lt;/string&gt;
			&lt;key&gt;SockType&lt;/key&gt;
			&lt;string&gt;dgram&lt;/string&gt;
		&lt;/dict&gt;
	&lt;/dict&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre></noscript></div>
</p>

<p>Once you have updated the plist the next step is to update the configuration of your AirPort Extreme. Under Applications => Utilities open the AirPort Utility and connect to your AirPort Extreme. On the Advanced tab select the “Logging &amp; Statistics” panel. Enter the IP address of your Mac OS X Lion Server in “Syslog Destination Address:” and select “6 – Informational” for the “Syslog Level:”. You can see a screenshot of the AirPort Utility settings below. Update the settings on the AirPort Extreme.</p>

<div>
  <img style="display:block; margin-left:auto; margin-right:auto;" src="http://www.idevelopsoftware.com/wp-content/uploads/2011/08/2011-08-09083214-AirPort-Utility-Focal-Shift-AirPort-Extreme.png" alt="AirPort Extreme Advanced Configuration" title="[2011-08-09083214]  AirPort Utility-Focal Shift AirPort Extreme.png" border="0" width="320" height="318" />
</div>


<p>Now, you probably want to verify that the logging is actually happening. Open Console.app on your server and look at “All Messages”. While looking at the logs go to another machine (I used my MacBook Air with a wireless connection to the AirPort Extreme) and open System Preferences and then Network. Select your network adapter and ask for it to renew the DHCP lease. You should see some activity in the log.</p>

<p>Another way to verify the logging is to turn wifi off on your laptop. You should see a message like this:</p>

<pre>8/9/11 8:43:09.000 AM 80211: Disassociated with station 60:33:4b:2c:de:c0
</pre>


<p>When you turn wifi back on you will see something similar to this:</p>

<pre>8/9/11 8:43:10.000 AM 80211: Rotated TKIP group key.
8/9/11 8:43:21.000 AM 80211: Associated with station 60:33:4b:2c:de:c0
8/9/11 8:43:21.000 AM 80211: Authenticating station 60:33:4b:2c:de:c0 to RADIUS.
8/9/11 8:43:21.000 AM 80211: Installed unicast CCMP key for supplicant 60:33:4b:2c:de:c0
8/9/11 8:43:21.000 AM natpmp: Binding added for udp, 173.164.164.17:32770 to 10.0.1.104:4500 with lifetime 7200
8/9/11 8:43:21.000 AM natpmp: Binding added for udp, 173.164.164.17:32771 to 10.0.1.104:5353 with lifetime 7200
</pre>


<p>That’s it. You now have syslog data being captured on your Mac OS X Lion server from your AirPort Extreme base station!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up my Snow Leopard Ruby 1.9.2, Ruby on Rails 3.0, Nginx, Passenger development environment
]]></title>
    <link href="http://blog.idevelopsoftware.com/2010/11/setting-up-my-snow-leopard-ruby-1-9-2-ruby-on-rails-3-0-nginx-passenger-development-environment/
/"/>
    <updated>2010-11-14T08:00:00-08:00</updated>
    <id>http://blog.idevelopsoftware.com/2010/11/setting-up-my-snow-leopard-ruby-1-9-2-ruby-on-rails-3-0-nginx-passenger-development-environment/setting-up-my-snow-leopard-ruby-1-9-2-ruby-on-rails-3-0-nginx-passenger-development-environment</id>
    <content type="html"><![CDATA[<p>Snow Leopard ships with Ruby 1.8.7 installed and an older version of Ruby Gems. I am planning on doing some projects with Ruby on Rails and wanted to setup a current environment. My requirements were:</p>

<ul>
<li>Ruby 1.9.2</li>
<li>Rails 3.0</li>
<li>PostgreSQL 9.0</li>
<li>Nginx</li>
<li>Passenger</li>
</ul>


<p>You should download and install the Mac version of PostgreSQL 9.0 from the folks at <a href="http://www.enterprisedb.com/products/download.do">EnterpriseDB</a>. You will need to register on the site in order to do the download. Be sure to download PostgreSQL 9.0.1, not one of their <em>Plus</em> packages. It is a nicely packaged installer for the freely available version of Postgres.</p>

<p>Once you install this software you should have a file called <tt>pg_env.sh</tt> in the <tt>/Library/PostgreSQL/9.0/</tt> directory. This file should be added to your <tt>/etc/profile</tt>. Here is an example of what mine looks like:</p>

<pre># System-wide .profile for sh(1)

# This has to be set to something in order for path_helper (below)
# to update it with paths found in the /etc/manpaths.d directory.
MANPATH=/usr/local/share/man; export MANPATH

# Setup the PostgreSQL environment.
. /Library/PostgreSQL/9.0/pg_env.sh

if [ -x /usr/libexec/path_helper ]; then
    eval `/usr/libexec/path_helper -s`
fi

if [ "${BASH-no}" != "no" ]; then
    [ -r /etc/bashrc ] &#038;&#038; . /etc/bashrc
fi
</pre>


<p>Be sure to log out and log back in before continuing with these instructions. This is important to make sure your PostgreSQL environment variables are set properly.</p>

<p>One of my goals with this setup is to keep everything independent of the default tools that ship with Snow Leopard. To do this I decided that all of my Ruby on Rails setup will be located in the <tt>/usr/local/ror</tt> directory tree. Here is a script I developed to setup my Ruby on Rails development environment.</p>

<pre>#!/bin/bash

# Get and extract a copy of LibYAML
curl http://pyyaml.org/download/libyaml/yaml-0.1.3.tar.gz > yaml-0.1.3.tar.gz
tar xvf yaml-0.1.3.tar.gz

# Build LibYAML
(
    cd yaml-0.1.3
    ./configure
    make
    sudo make install
)

# Get and extract a copy of Ruby 1.9.2
curl ftp://ftp.ruby-lang.org:21//pub/ruby/1.9/ruby-1.9.2-p0.tar.gz > ruby-1.9.2-p0.tar.gz
tar xvf ruby-1.9.2-p0.tar.gz

# Build Ruby 1.9.2
(
    cd ruby-1.9.2-p0
    ./configure --prefix=/usr/local/ror --with-arch=x86_64 --enable-shared
    make
    make test
    sudo make install
)

# Update Ruby Gems
sudo gem update --system

# Install Gems
sudo gem install rails
sudo gem install sqlite3-ruby
sudo gem install pg
sudo gem install passenger

# Configure Passenger for Nginx (downloads Nginx and PCRE automatically)
sudo passenger-install-nginx-module --prefix=/usr/local/ror --auto-download --auto
</pre>


<p><a href="http://wp-media.s3.amazonaws.com/wp-content/uploads/2010/11/doit.sh.tar" class="s3-link">Download the script</a>, un-tar it and place it in any directory you want. I call the script <tt>doit.sh</tt>, but you can name it anything you like. Run the script using the command shown below.</p>

<pre>$ sh ./doit.sh
</pre>


<p>Once the script completes you need to add <tt>/usr/local/ror/bin</tt> to your path. I did this by editing my <tt>/etc/paths</tt> file. Here is a copy of the file on my machine:</p>

<pre>usr/local/ror/bin
/usr/local/bin
/usr/bin
/bin
/usr/sbin
/sbin
</pre>


<p>One more logout/login and you are done. Have fun playing with Ruby on Rails on your Mac!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacBook Pro Development Environment]]></title>
    <link href="http://blog.idevelopsoftware.com/2010/10/macbook-pro-development-environment/"/>
    <updated>2010-10-01T08:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2010/10/macbook-pro-development-environment</id>
    <content type="html"><![CDATA[<p>This article covers the steps I went through to setup my MacBook Pro for Google App Engine (GAE) development. I am using the Python runtime in GAE so the focus here is on a Python development environment.</p>

<h1>Python</h1>

<h2>Setting Python 2.5 as Default</h2>

<p>My MacBook Pro is running Snow Leopard. I am planning to host my projects on Google App Engine and it requires Python 2.5. Snow Leopard ships with Python 2.6 as the default. You can switch to Python 2.5 using a few simple commands, as follows:</p>

<pre>$ defaults write com.apple.versioner.python Version 2.5
$ sudo defaults write /Library/Preferences/com.apple.versioner.python Version 2.5
</pre>


<p>After issuing these commands you should logout and login, launch a Terminal window and issue the command</p>

<pre>$ python --version
</pre>


<p>It should report <tt>Python 2.5.4</tt> as the result. If it still says <tt>Python 2.6.1</tt> then your change did not take effect. To troubleshoot the problem start with <tt>man python</tt>. It includes information on how to switch the default version of Python on your system.</p>

<h2>Additional Python Modules</h2>

<p>Google App Engine expects that the ssl module is installed. This is so it can verify the identity of the GAE servers when trying to deploy your projects. Install it like this:</p>

<pre>$ curl http://pypi.python.org/packages/source/s/ssl/ssl-1.15.tar.gz --output ssl-1.15.tar.gz
$ tar xvf ssl-1.15.tar.gz
$ cd ssl-1.15
$ sudo python setup.py install
</pre>


<p>If you want to use the GAE image manipulation classes while running on the local development server you will need to install PIL using the following command.</p>

<pre>$ sudo easy_install pil
</pre>


<p>The following will be necessary for building some other python libraries later in the process.</p>

<pre>$ sudo easy_install docutils
</pre>


<p>The following modules are necessary if you choose to install IPython (see next section). If you are planning on skipping the IPython installation these can be skipped as well.</p>

<pre>$ sudo easy_install readline
$ sudo easy_install nose
$ sudo easy_install pexpect
</pre>


<h2>IPython</h2>

<p>The IPython interactive interpreter is a good addition to your Python development environment. It does not come pre-installed on Snow Leopard. You can download the latest stable version using this command:</p>

<pre>$ curl http://ipython.scipy.org/dist/0.10/ipython-0.10.tar.gz --output ipython-0.10.tar.gz
$ tar -xzf ipython-0.10.tar.gz
$ cd ipython
$ sudo python setup.py install
</pre>


<h1>Google App Engine SDK</h1>

<p>The Google App Engine SDK for Python is available at http://code.google.com/appengine/downloads.html. As of this writing you can use the following command to grab the latest version:</p>

<pre>$ curl http://googleappengine.googlecode.com/files/GoogleAppEngineLauncher-1.3.7.dmg --output GoogleAppEngineLauncher-1.3.7.dmg
</pre>


<p>Once you download the <tt>dmg</tt> file open it in Finder and run the installer. It will place all of the necessary files on your machine. Once complete locate the <em>GoogleAppEngineLauncher.app</em> icon in Finder and double-click on it. This application provides a nice UI for managing your GAE projects.</p>

<h1>Source Code Management Tools</h1>

<h2>Git</h2>

<p>I am planning on managing the source code for my projects with <tt>git</tt> and will store my master repositories on <a href="http://github.com">http://github.com</a>. Apple does not include a copy of <tt>git</tt> on the machine by default. An installer is available at <a href="http://help.github.com/mac-git-installation/">http://help.github.com/mac-git-installation/</a>. While you are at it also create an account on github if you don’t already have one. It is useful for <em>social coding</em> in the wider open-source community.</p>

<h2>Mercurial</h2>

<p>Some of the Django open source software I plan on using is maintained using a distributed source control management tool called Mercurial. An installer for this is available at <a href="http://mercurial.selenic.com">http://mercurial.selenic.com</a>. Download and install the software.</p>

<pre>$ curl http://mercurial.selenic.com/release/mercurial-1.6.3.tar.gz --output mercurial-1.6.3.tar.gz
$ tar xvf mercurial-1.6.3.tar.gz
$ cd mercurial-1.6.3
$ make PREFIX=/System/Library/Frameworks/Python.framework/Versions/2.5 all
$ sudo make PREFIX=/System/Library/Frameworks/Python.framework/Versions/2.5 install
$ hg version
</pre>


<h1>Django-nonrel</h1>

<p>I plan on implementing my web applications on top of the Django framework. Some modifications are required in order for this framework to run properly on GAE since Google uses <em>Big Table</em> for data storage instead of a relational database. Everything necessary to get Django working in GAE is included as part of the <a href="http://www.allbuttonspressed.com/projects/django-nonrel">Django-nonrel</a> project. Specific instructions for GAE are available at <a href="http://www.allbuttonspressed.com/projects/djangoappengine">http://www.allbuttonspressed.com/projects/djangoappengine</a>.</p>

<p>Use the commands listed below to install copies of all the necessary components onto your machine. Everything will be stored in a folder called <tt>DjangoStuff</tt> under your home directory.</p>

<pre>$ mkdir $HOME/DjangoStuff
$ cd $HOME/DjangoStuff
$ hg clone https://bitbucket.org/wkornewald/django-nonrel
$ hg clone https://bitbucket.org/wkornewald/djangoappengine
$ hg clone https://bitbucket.org/wkornewald/djangotoolbox
$ hg clone https://bitbucket.org/wkornewald/django-dbindexer
$ hg clone https://bitbucket.org/wkornewald/django-testapp
</pre>


<p>Now, pick another folder where you want to setup a practice application. I am calling mine <tt>cs-practice</tt> since this is also the name of my Google App Engine application.</p>

<p>Use the following commands to configure the practice application for Django-nonrel development.</p>

<pre>$ mkdir $HOME/cs-practice
$ cd $HOME/cs-practice
$ ln -s $HOME/DjangoStuff/django-nonrel/django django
$ ln -s $HOME/DjangoStuff/djangoappengine djangoappengine
$ ln -s $HOME/DjangoStuff/djangotoolbox/djangotoolbox djangotoolbox
$ ln -s $HOME/DjangoStuff/django-dbindexer/dbindexer dbindexer
$ cp -r $HOME/DjangoStuff/django-testapp/* .
</pre>


<p>Once you have the practice folder setup you need to edit the <tt>app.yaml</tt> file and change the application name to reflect the Google App Engine application name you selected when registering on <a href="http://appengine.google.com">http://appengine.google.com</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HOWTO: Answer the question &#8220;Is {some site} up or down?&#8221;]]></title>
    <link href="http://blog.idevelopsoftware.com/2009/06/howto-answer-the-question-is-some-site-up-or-down/"/>
    <updated>2009-06-28T08:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2009/06/howto-answer-the-question-is-some-site-up-or-down</id>
    <content type="html"><![CDATA[<p>I just stumbled on a very cool service that helps you answer the question “Is {some site} up or down?” It couldn’t be simpler. Visit <a href="http://downforeveryoneorjustme.com">http://downforeveryoneorjustme.com</a> and you will see a very simple form that looks like this:</p>

<div style="text-align:center;">
  <img src="http://wp-media.s3.amazonaws.com/screenshots/downforeveryone-1.jpg" />
</div>


<p>Enter the name of a site and the folks running the site will go check and see if it is possible to visit the site from their location on the net. If the site is reachable you will see something like this:</p>

<div style="text-align:center;">
  <img src="http://wp-media.s3.amazonaws.com/screenshots/downforeveryone-2.jpg" />
</div>


<p>If it is not reachable you will see something like this:</p>

<div style="text-align:center;">
  <img src="http://wp-media.s3.amazonaws.com/screenshots/downforeveryone-3.jpg" />
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Unit Testing in Xcode 3.1]]></title>
    <link href="http://blog.idevelopsoftware.com/2008/07/setting-up-unit-testing-in-xcode-31/"/>
    <updated>2008-07-28T08:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2008/07/setting-up-unit-testing-in-xcode-31</id>
    <content type="html"><![CDATA[<p>Xcode includes OCUnit, so you don’t need to get a copy. But, you might want to take a look at their website (http://sente.epfl.ch/software/ocunit/) for information and tutorials on how OCUnit is intended to be used.</p>

<p>If you are planning on doing Test Driven Development (TDD) you may also want to get the following packages:</p>

<ul>
<li>OCMock – OCMock is an Objective-C implementation of mock objects. (<a href="http://www.mulle-kybernetik.com/software/OCMock/">http://www.mulle-kybernetik.com/software/OCMock/</a>)</li>
<li>Hamcrest – library of matchers for building test expressions (<a href="http://code.google.com/p/hamcrest/">http://code.google.com/p/hamcrest/</a>)</li>
</ul>


<p>Other good articles on Xcode Unit Testing that I came across:</p>

<ul>
<li>Unit Testing with OCUnit – <a href="http://www.macdevcenter.com/pub/a/mac/2004/04/23/ocunit.html?page=1">http://www.macdevcenter.com/pub/a/mac/2004/04/23/ocunit.html?page=1</a></li>
<li>Test Driving Your Code with OCUnit – <a href="http://developer.apple.com/tools/unittest.html">http://developer.apple.com/tools/unittest.html</a></li>
<li>Xcode unit testing articles – <a href="http://chanson.livejournal.com/tag/unit+testing">http://chanson.livejournal.com/tag/unit+testing</a></li>
<li>Unit Testing with Xcode – <a href="http://www.stiefels.net/2007/05/01/unit-testing-with-xcode/">http://www.stiefels.net/2007/05/01/unit-testing-with-xcode/</a></li>
</ul>


<p>By reading through the documents references above I was able to get OCUnit up and running for one of my projects. It took a bit of experimentation, but in the end it looks like OCUnit will work just fine for doing TDD in Xcode with Objective-C. Anyone wanting to try out TDD should give it a try. The benefits for your project are significant. Go for it!</p>
]]></content>
  </entry>
  
</feed>
