<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blog | iDevelopSoftware]]></title>
  <link href="http://blog.idevelopsoftware.com/blog/categories/blog/atom.xml" rel="self"/>
  <link href="http://blog.idevelopsoftware.com/"/>
  <updated>2013-02-10T20:59:05-08:00</updated>
  <id>http://blog.idevelopsoftware.com/</id>
  <author>
    <name><![CDATA[Bennett Smith]]></name>
    <email><![CDATA[bsmith@idevelopsoftware.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Capturing AirPort Extreme Log with Lion Server Syslog]]></title>
    <link href="http://blog.idevelopsoftware.com/2011/08/capturing-airport-extreme-log-with-lion-server-syslog/"/>
    <updated>2011-08-09T08:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2011/08/capturing-airport-extreme-log-with-lion-server-syslog</id>
    <content type="html"><![CDATA[<p>Mac OS X Lion Server can be used as a syslog server to capture the log messages from an Apple AirPort Extreme wireless router. The instructions below walk you through setting this up.</p>

<p>Syslog is controlled by a plist file found in the launch daemons directory. The full path to the file is:</p>

<pre>/System/Library/LaunchDaemons/com.apple.syslogd.plist
</pre>


<p>You need to edit this file to add a network listener. The plist is stored in a binary format so you need to use the plutil to convert it to XML using this command:</p>

<pre>$ pushd /System/Library/LaunchDaemons
$ sudo plutil -convert xml1 /System/Library/LaunchDaemons/com.apple.syslogd.plist
$ sudo vim /System/Library/LaunchDaemons/com.apple.syslogd.plist
$ sudo plutil -convert binary1 /System/Library/LaunchDaemons/com.apple.syslogd.plist
$ sudo launchctl unload /System/Library/LaunchDaemons/com.apple.syslogd.plist
$ sudo launchctl load /System/Library/LaunchDaemons/com.apple.syslogd.plist
</pre>


<p>Here is a complete example of the modified plist file. The new key is the NetworkListener. Be sure you add it nested inside the Sockets key or it will not work.</p>

<p><div><script src='https://gist.github.com/1134216.js'></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
	&lt;key&gt;EnableTransactions&lt;/key&gt;
	&lt;true/&gt;
	&lt;key&gt;EnvironmentVariables&lt;/key&gt;
	&lt;dict&gt;
		&lt;key&gt;ASL_DISABLE&lt;/key&gt;
		&lt;string&gt;1&lt;/string&gt;
	&lt;/dict&gt;
	&lt;key&gt;HopefullyExitsLast&lt;/key&gt;
	&lt;true/&gt;
	&lt;key&gt;JetsamProperties&lt;/key&gt;
	&lt;dict&gt;
		&lt;key&gt;JetsamMemoryLimit&lt;/key&gt;
		&lt;integer&gt;300&lt;/integer&gt;
		&lt;key&gt;JetsamPriority&lt;/key&gt;
		&lt;integer&gt;-49&lt;/integer&gt;
	&lt;/dict&gt;
	&lt;key&gt;Label&lt;/key&gt;
	&lt;string&gt;com.apple.syslogd&lt;/string&gt;
	&lt;key&gt;MachServices&lt;/key&gt;
	&lt;dict&gt;
		&lt;key&gt;com.apple.system.logger&lt;/key&gt;
		&lt;true/&gt;
	&lt;/dict&gt;
	&lt;key&gt;OnDemand&lt;/key&gt;
	&lt;false/&gt;
	&lt;key&gt;ProgramArguments&lt;/key&gt;
	&lt;array&gt;
		&lt;string&gt;/usr/sbin/syslogd&lt;/string&gt;
	&lt;/array&gt;
	&lt;key&gt;Sockets&lt;/key&gt;
	&lt;dict&gt;
		&lt;key&gt;NetworkListener&lt;/key&gt;
		&lt;dict&gt;
			&lt;key&gt;SockServiceName&lt;/key&gt;
			&lt;string&gt;syslog&lt;/string&gt;
			&lt;key&gt;SockType&lt;/key&gt;
			&lt;string&gt;dgram&lt;/string&gt;
		&lt;/dict&gt;
		&lt;key&gt;AppleSystemLogger&lt;/key&gt;
		&lt;dict&gt;
			&lt;key&gt;SockPathMode&lt;/key&gt;
			&lt;integer&gt;438&lt;/integer&gt;
			&lt;key&gt;SockPathName&lt;/key&gt;
			&lt;string&gt;/var/run/asl_input&lt;/string&gt;
		&lt;/dict&gt;
		&lt;key&gt;BSDSystemLogger&lt;/key&gt;
		&lt;dict&gt;
			&lt;key&gt;SockPathMode&lt;/key&gt;
			&lt;integer&gt;438&lt;/integer&gt;
			&lt;key&gt;SockPathName&lt;/key&gt;
			&lt;string&gt;/var/run/syslog&lt;/string&gt;
			&lt;key&gt;SockType&lt;/key&gt;
			&lt;string&gt;dgram&lt;/string&gt;
		&lt;/dict&gt;
	&lt;/dict&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre></noscript></div>
</p>

<p>Once you have updated the plist the next step is to update the configuration of your AirPort Extreme. Under Applications => Utilities open the AirPort Utility and connect to your AirPort Extreme. On the Advanced tab select the “Logging &amp; Statistics” panel. Enter the IP address of your Mac OS X Lion Server in “Syslog Destination Address:” and select “6 – Informational” for the “Syslog Level:”. You can see a screenshot of the AirPort Utility settings below. Update the settings on the AirPort Extreme.</p>

<div>
  <img style="display:block; margin-left:auto; margin-right:auto;" src="http://www.idevelopsoftware.com/wp-content/uploads/2011/08/2011-08-09083214-AirPort-Utility-Focal-Shift-AirPort-Extreme.png" alt="AirPort Extreme Advanced Configuration" title="[2011-08-09083214]  AirPort Utility-Focal Shift AirPort Extreme.png" border="0" width="320" height="318" />
</div>


<p>Now, you probably want to verify that the logging is actually happening. Open Console.app on your server and look at “All Messages”. While looking at the logs go to another machine (I used my MacBook Air with a wireless connection to the AirPort Extreme) and open System Preferences and then Network. Select your network adapter and ask for it to renew the DHCP lease. You should see some activity in the log.</p>

<p>Another way to verify the logging is to turn wifi off on your laptop. You should see a message like this:</p>

<pre>8/9/11 8:43:09.000 AM 80211: Disassociated with station 60:33:4b:2c:de:c0
</pre>


<p>When you turn wifi back on you will see something similar to this:</p>

<pre>8/9/11 8:43:10.000 AM 80211: Rotated TKIP group key.
8/9/11 8:43:21.000 AM 80211: Associated with station 60:33:4b:2c:de:c0
8/9/11 8:43:21.000 AM 80211: Authenticating station 60:33:4b:2c:de:c0 to RADIUS.
8/9/11 8:43:21.000 AM 80211: Installed unicast CCMP key for supplicant 60:33:4b:2c:de:c0
8/9/11 8:43:21.000 AM natpmp: Binding added for udp, 173.164.164.17:32770 to 10.0.1.104:4500 with lifetime 7200
8/9/11 8:43:21.000 AM natpmp: Binding added for udp, 173.164.164.17:32771 to 10.0.1.104:5353 with lifetime 7200
</pre>


<p>That’s it. You now have syslog data being captured on your Mac OS X Lion server from your AirPort Extreme base station!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cookbook: Snow Leopard, RVM, Ruby on Rails]]></title>
    <link href="http://blog.idevelopsoftware.com/2011/08/cookbook-snow-leopard-rvm-ruby-on-rails/"/>
    <updated>2011-08-01T08:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2011/08/cookbook-snow-leopard-rvm-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>Recently I decided to clear out my RVM environments and start fresh. I’m running on a Snow Leopard MacBook Air. Here are the steps I went through.</p>

<pre>$ curl -O ftp://ftp.cwru.edu/pub/bash/readline-6.0.tar.gz
$ tar xvf readline-6.0.tar.gz
$ cd readline-6.0
$ ./config &#038;&#038; make &#038;&#038; sudo make install
$ cd ..
$ rm -rf $HOME/.rvm
$ bash &lt; &lt;(curl -s https://rvm.beginrescueend.com/install/rvm)
$ rvm install 1.8.7 -C --with-arch=x86_64, --with-readline-dir=/usr/local
$ rvm system
$ rvm gemset export system.gems
$ rvm 1.8.7
$ rvm gemset import system
$ rvm --default 1.8.7
</pre>


<p>The following pages were helpful in figuring this out.</p>

<ul>
<li><a href="http://www.commonvision.com.au/tag/readline/">RVM, Mac OSX 10.6 and Ruby 1.8.78 p302 Install Error</a></li>
<li><a href="http://tim.theenchanter.com/2010/01/getting-ruby-to-use-readline-instead-of.html">getting ruby to use readline instead of libedit</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on setting up a Ruby on Rails Environment for Ubuntu 10.04.1 LTS]]></title>
    <link href="http://blog.idevelopsoftware.com/2011/03/notes-on-setting-up-a-ruby-on-rails-environment-for-ubuntu-10-04-1-lts/"/>
    <updated>2011-03-19T08:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2011/03/notes-on-setting-up-a-ruby-on-rails-environment-for-ubuntu-10-04-1-lts</id>
    <content type="html"><![CDATA[<p>Clone virtual machine</p>

<p>Boot up, open terminal window and run the following commands in order to configure network. (Updates the MAC address for the virtual network adapter.)</p>

<pre># rm -fr /etc/udev/rules.d/70-persistent-net.rules
# shutdown -r now
</pre>


<p>Packages to install…</p>

<pre>sudo apt-get install vim
sudo apt-get install build-essential
sudo apt-get install curl
sudo apt-get install zlib1g-dev
sudo apt-get install libssl-dev
sudo apt-get install libreadline5-dev
sudo apt-get install sqlite3 libsqlite3-dev sqlite3-doc
sudo apt-get install libxml2 libxml2-dev libxslt1-dev
sudo apt-get install libyaml-dev
sudo apt-get install postgresql-8.4 postgresql-client  postgresql-client-8.4 postgresql-doc-8.4
sudo apt-get install postgresql-server-dev-8.4
sudo apt-get install pgadmin3
sudo apt-get install libcurl4-openssl-dev
sudo apt-get install git-arch git-doc git-csv git-svn git-email git-daemon-run git-gui gitk gitweb
sudo apt-get install ssh subversion libgssapi-perl libio-socket-inet6-perl rssh molly-guard
sudo apt-get install openssh-blacklist openssh-blacklist-extra socklog-run
sudo apt-get install rdist makejail subversion-tools db4.8-util

sudo apt-get install autoconf autoconf2.13 autoconf-archive gnu-standards autoconf-doc libtool gettext gettext-doc libtool-doc

sudo apt-get install ruby
sudo apt-get install ruby1.8 ruby1.8-dev rubygems1.8 ruby1.8-examples ri1.8 rubygems-doc graphviz graphviz-doc

sudo apt-get install flex bison bison-doc
</pre>


<p>Setting up RVM</p>

<pre># System Wide RVM Installation
bash &lt; &lt;( curl -L http://bit.ly/rvm-install-system-wide )

# Setup of user defaults
edit /etc/adduser.conf
 - enable the EXTRA_GROUPS stuff and make sure the user is added to the 'rvm' group
edit /etc/skel/.bashrc to add the necessary RVM initialization stuff

sudo su -
rvm install ruby-1.9.2-p0

rvm install ruby-1.9.2-head
</pre>


<p>(notes on config of Postgres on Ubuntu https://help.ubuntu.com/community/PostgreSQL)</p>

<pre>curl ftp://ftp.ruby-lang.org:21//pub/ruby/1.9/ruby-1.9.2-p0.tar.gz > ruby-1.9.2-p0.tar.gz
tar xvf ruby-1.9.2-p0.tar.gz

cd ruby-1.9.2-p0
./configure --prefix=/usr/local/ror --enable-shared
make
make test
sudo make install
</pre>


<p>Create a file called /usr/local/ror/ror_env.sh. Add the following to it:</p>

<pre>export PATH=/usr/local/ror/bin:$PATH
</pre>


<p>Run the command</p>

<pre>sudo ln -s /usr/local/ror/ror_env.sh /etc/profile.d/ror_env.sh
</pre>


<p>Log out / Log in</p>

<p>Open a terminal window</p>

<pre>$ which ruby
/usr/local/ror/bin/ruby
$ which gem
/usr/local/ror/bin/gem
</pre>




<pre>sudo su -
gem update --system
gem install rails -v 3.0.3
gem install sqlite3-ruby
gem install pg
gem install passenger
</pre>




<pre>passenger-install-nginx-module --prefix=/usr/local/ror --auto-download --auto
</pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Cheat Sheet]]></title>
    <link href="http://blog.idevelopsoftware.com/2011/03/git-cheat-sheet/"/>
    <updated>2011-03-19T08:00:00-07:00</updated>
    <id>http://blog.idevelopsoftware.com/2011/03/git-cheat-sheet</id>
    <content type="html"><![CDATA[<p>After watching from the side lines for a few years as git gathered a following I finally made the switch out of necessity as a result of doing more projects in Ruby on Rails. The projects I work on are all hosted in the cloud (Heroku, Engine Yard, or directly on Amazon EC2). Many of the tools I use support direct deployment from git. So I now find myself migrating all of my projects from subversion to git.</p>

<p>I tend to write down a lot of notes as I learn a new technology or tool. The migration to git is no different. What is different is how GitHub (the hosted git solution I am using) makes it possible to record just about anything in what they call a <em>gist</em>. This is turning out to be a very useful tool for me. It is a great place to store little bits of code or notes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding MongoDB to my Mac OS X Snow Leopard Ruby on Rails Environment]]></title>
    <link href="http://blog.idevelopsoftware.com/2010/11/adding-mongodb-to-my-mac-os-x-snow-leopard-ruby-on-rails-environment/"/>
    <updated>2010-11-15T08:00:00-08:00</updated>
    <id>http://blog.idevelopsoftware.com/2010/11/adding-mongodb-to-my-mac-os-x-snow-leopard-ruby-on-rails-environment</id>
    <content type="html"><![CDATA[<p>Tonight I wanted to add MongoDB to my Mac OS X Snow Leopard Ruby on Rails Environment. Refer to my <a href="http://www.idevelopsoftware.com/2010/11/setting-up-my-snow-leopard-ruby-1-9-2-ruby-on-rails-3-0-nginx-passenger-development-environment/">earlier post</a> for details of how I setup my environment. This post assumes your environment is setup according to the instructions found there.</p>

<p>I wrote the following script to handle installation of MongoDB. I decided to grab the pre-built version of MongoDB from the project site and then place the files under the <tt>/usr/local/ror</tt> directory tree.</p>

<pre>#!/bin/bash

# Get and extract a copy of Mongodb
curl http://fastdl.mongodb.org/osx/mongodb-osx-x86_64-1.6.4.tgz > mongodb-osx-x86_64-1.6.4.tgz
tar xvf mongodb-osx-x86_64-1.6.4.tgz

curl http://downloads.mongodb.org/docs/mongodb-docs-2010-09-23.pdf > mongodb-docs-2010-09-23.pdf

# Move files into final locations
(
    cd mongodb-osx-x86_64-1.6.4
    sudo cp -R * /usr/local/ror
    sudo chmod a+r /usr/local/ror/GNU* /usr/local/ror/README* /usr/local/ror/THIRD*
    sudo gem install mongo
)

(
    sudo cp mongodb-docs-2010-09-23.pdf /usr/local/ror/share/doc/mongodb.pdf
    sudo chmod a+r /usr/local/ror/share/doc/mongodb.pdf
)
</pre>


<p>Download the script tarball (<a href="http://wp-media.s3.amazonaws.com/wp-content/uploads/2010/11/mongodb.sh.tar" class="s3-link">mongodb.sh.tar</a>), extract it into a folder like <tt>/tmp</tt> and then run <tt>sh ./mongodb.sh</tt>. This will download the MongoDB binaries and place everything in the <tt>/usr/local/ror</tt> tree.</p>

<p>One final step. Since you are running on a Mac you might want to check out a cool MongoDB client called MongoHub. You can learn more and download it from the official <a href="http://mongohub.todayclose.com/">site</a>.</p>
]]></content>
  </entry>
  
</feed>
